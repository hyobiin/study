TypeScript란?
- 마이크로소프트(Microsoft)에서 개발한 프로그래밍 언어
- 자바스크립트에 정적 타입(static typing), 인터페이스(interface), 제너릭(generic), 클래스(class)등의 기능을 추가한 언어
- 최종적으로 자바스크립트로 변환되어 실행

TypeScript 특징
- 정적 타입 검사 => 개발 중에 타입 오류를 감지
- 가독성 및 유지보수성 향상
- 강력한 객체 지향 프로그래밍 지원 => 클래스, 인터페이스, 접근 제한자 제공

TypeScript 기본 문법
- 변수를 선언할 때는 타입을 명시적 지정
ex)
let message : string = "hello~";
let count : number = 42;
let isDone : boolean = true;

TypeScript 동작 원리
- 자바스크립트 코드는 실행되기 전 내부적으로 AST(추상 문법 트리)로 변환
- 해당하는 트리를 바이트 코드로 변환하여 컴퓨터가 실행
- 컴퓨터가 실행하기 전 이러한 과정을 컴파일이라고 함
- 자바스크립트 코드 => AST 변환 => 바이트 코드로 변환하는 과정
- 하지만 타입스크림트 코드는 다음과 같은 과정으로 컴파일이 수행 됨
- 타입스크립트 코드 => AST 변환 => 타입 검사 => 자바스크립트 코드로 변환
- 즉 실행 자체는 자바스크립트 코드로 수행 됨

---------------------------------------------------------------------------

자바스크립트 모듈 시스템

1. ES 모듈(ESM, ES6 Module)
- 가장 최근에 개발된 모듈 시스템으로, 리액트 Vue와 같은 최신 프론트엔드 기술은 ESM을 선택
- import 및 export 키워드를 사용하여 모듈을 불러오거나 내보냄

(1) 기본 내보내기
export default function add(a,b){
  return a + b;
}

import add from '파일명'
console.log(add(2,3));

(2)  명명된 내보내기
export function add(a, b){
  return a + b;
}

export function sub(a, b){
  return a - b;
}

import { add, sub } from '파일명';
console.log(add(5, 3), sub(5, 2));

(3) 별칭 사용 (as 키워드)
export function multiply(a, b){
  return a * b;
}

import { multiply as mul } from '파일명';

console.log(mul(4, 5));

(4) 모든 모듈 가져오기
export function add(a, b){
  return a + b;
}
export function sub(a, b){
  return a - b;
}
export function mul(a, b){
  return a * b;
}

import * as math from '파일명';

console.log(math.add(2, 3));

2. CommonJS (node.js 모듈 시스템)
- node.js의 등장과 함께  CommonJS가 만들어 짐
- require()를 사용해 모듈을 불러오고 module.exports를 사용해 모듈을 내보냄 => require == import
- node.js에서 기본적으로 사용

(1) 모듈 내보내기
function add(a, b){
  return a + b;
}

function sub(a, b){
  return a - b;
}

module.exports = { add, sub };

(2) 모듈 불러오기
const math = require('파일명');
console.log(math.add(2, 3));